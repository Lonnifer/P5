#!/bin/bash

#configurable external programs. Please update these to your favorite tools. The ones used here require you to run X forwarding.
export P4DIFF=meld
export P4MERGE=p4merge
export EDITOR=gvim
export TMPDIR="/tmp"

#colours
NL=$'\n'
WHITE='\033[1;37m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m' # No Color

#colours with extra slashes to be used for regex
WHITE_REGEX='\\033\[1;37m'
NC_REGEX='\\033\[0m'

generate_changes_list()
{
	# print changes prefixed with line numbers. Beautify the output so we get more of each CL description.
	ALLCHANGES=`p4 changes -c ${P4CLIENT} -s pending -l`

	CHANGES_LIST="${YELLOW}0)${NC} default$NL"
	LINE=0

	while IFS= read -r line; do
		CL=`echo "$line" | grep "^Change" | sed -E 's/^Change (.*) by.*/\1/g'`
		if [[ $CL != "" ]]
		then
			read -r line
			read -r line
			LINE=$(($LINE + 1))
			CHANGES_LIST="$CHANGES_LIST${YELLOW}$LINE)$NC $CL - $line$NL"
		fi
	done <<< "$ALLCHANGES"

	echo -e "$CHANGES_LIST"
}

select_from_changes_list()
{
	#$1 = changes list
	#$2 = selection number

	if [ $2 -eq 0 ]
	then
		SELECTED_CL="default"
	else
		# pick out the CL corresponding to SELECTION_NUMBER
		# grep selects line with CL#, sed picks out the CL#
		SELECTED_CL=`echo "$1" | grep -E "^$2\)" | sed -E 's/[0-9]+\) ([0-9]+) .*/\1/g'`
	fi
	
	echo "$SELECTED_CL"
}


function describe_cl()
{
	if [ $1 = "default" ]; then
		#prefix every line with ... to make it look like the p4 describe output. This makes the code below simpler
		p4 opened -c default | sed -E 's/^/\.\.\. /g'
	else
		p4 describe -s $1
	fi
}

function describe_cl_and_number_files()
{

	local DESC=`describe_cl $1`
	# list of files from the describe output
	local FILELIST=`echo "${DESC}" | grep "^\.\.\." | sed -E 's/^\.\.\. (.*)#.*/\1/g'`

	#get list of files that need to be resolved. sed replaces local path with depot path.
	local FILES_NEEDING_RESOLVE=`p4 resolve -n 2> /dev/null | sed -E "s@$P4ROOT@/@g"`

	local SELECTION_COUNTER=0

	if [[ $FILELIST != "" ]]
	then
		# the remote status of each file
		local REMOTELIST=`p4 files ${FILELIST} 2> /dev/null`

		#iterate through 'describe' output line by line 
		while IFS= read -r line; do
			#grab the filename
			local FILENAME=`echo "$line" | grep "^\.\.\." | sed -E 's/^\.\.\. (.*)#.*/\1/g'`
			if [ "$FILENAME" == "" ]
			then
				echo "$line"
			else
				if [[ $FILES_NEEDING_RESOLVE =~ $FILENAME ]] ; then
					local NEEDS_RESOLVE=" ${RED}needs resolve${NC}"
				else
					local NEEDS_RESOLVE=""
				fi

				#this is a line containing a filename. Prefix a selection number
				local SELECTION_LINE="${YELLOW}$SELECTION_COUNTER)$NC $line$NEEDS_RESOLVE"
				#highlight the filename
				local SELECTION_LINE=`echo "$SELECTION_LINE" | sed -E "s@/([^/]*)#@/$WHITE_REGEX\1$NC_REGEX#@g"`

				local SELECTION_LINE_NOCOLOR="$SELECTION_COUNTER) $line"
				local SELECTION_COUNTER=$(($SELECTION_COUNTER + 1))


				#find it in the remote list
				local REMOTELINE=`echo "$REMOTELIST" | grep "$FILENAME"`
				#only keep the stuff after the # sign
				local REMOTE_REV=`echo "$REMOTELINE" | sed -E 's/(.*)#([0-9]+)(.*)/\2/g'`

				#add remote rev
				local SELECTION_LINE=`echo "$SELECTION_LINE" | sed -E "s@(#[0-9]+)@\\1/$REMOTE_REV@g"`
				#prefix some spaces so SELECTION_LINE and REMOTELINE are aligned
				#local PREFIX=`echo -e "$SELECTION_LINE_NOCOLOR" | sed -E 's/^(.*)(#.*)/\1/g' | sed -E 's/./ /g'`
				
				echo -e "$SELECTION_LINE"
				#echo -e "$PREFIX$REMOTELINE"
			fi
		done <<< "$DESC"
	else
		echo "$DESC"
	fi

	local SHELVED=`p4 files @=$1 2> /dev/null`
	if [ "$SHELVED" != "" ]
	then
		echo ""
		echo "shelved files ..."
		while IFS= read -r line; do
				#sed highlights the filename
				local SELECTION_LINE=`echo -e "${YELLOW}$SELECTION_COUNTER)$NC $line" | sed -E "s@/([^/]*)#@/$WHITE_REGEX\1$NC_REGEX#@g"`
				echo -e "$SELECTION_LINE"
			local SELECTION_COUNTER=$(($SELECTION_COUNTER + 1))
		done <<< "$SHELVED"
	fi
}

function describe_external_cl_and_number_files()
{
	local DESC=`describe_cl $1`

	local SELECTION_COUNTER=1
	#iterate through 'describe' output line by line 
	while IFS= read -r line; do
		if ! [[ "$line" =~ ^\.\.\. ]]
		then
			echo "$line"
		else
			#this is a line containing a filename. Prefix a selection number
			local SELECTION_LINE="${YELLOW}$SELECTION_COUNTER)$NC $line"
			#highlight the filename
			local SELECTION_LINE=`echo "$SELECTION_LINE" | sed -E "s@/([^/]*)#@/$WHITE_REGEX\1$NC_REGEX#@g"`
			local SELECTION_COUNTER=$(($SELECTION_COUNTER + 1))

			echo -e "$SELECTION_LINE"
		fi
	done <<< "$DESC"

	#get list of shelved files. sed only keeps the stuff after "Shelved files ...". grep removes blank line. second sed trims the "... " from the start
	local SHELVED=`p4 describe -s -S $CL | sed '0,/^Shelved files \.\.\./d' | grep "^\.\.\." | sed -E 's/^\.\.\. //g'`

	if [ "$SHELVED" != "" ]
	then
		echo ""
		echo "shelved files ..."
		while IFS= read -r line; do
			#sed highlights the filename
			local SELECTION_LINE=`echo -e "${YELLOW}$SELECTION_COUNTER)$NC $line" | sed -E "s@/([^/]*)#@/$WHITE_REGEX\1$NC_REGEX#@g"`
			echo -e "$SELECTION_LINE"
			local SELECTION_COUNTER=$(($SELECTION_COUNTER + 1))
		done <<< "$SHELVED"
	fi
}

function select_files_from_cl_description()
{
	local DESC="$1"
	local SELECTION="$2"

	if [[ "$SELECTION" == "*" ]]
	then
		#pick out all selection numbers from DESC
		SELECTION=`echo "$DESC" | grep -E "^[0-9]+\)" | sed -E 's/^([0-9]+)\).*/\1/g'`
	fi


	# SELECTION is now a numbered list. pick out the files corresponding to SELECTION
	SELECTED_FILES=""
	SELECTED_SHELVED_FILES=""
	for SELECTION_NUMBER in ${SELECTION}
	do
		# one of these 2 will be empty, depending on whether it is a regular checked out file "7) ... //blah"
		# or a shelved file "7) //blah"
		SELECTED_FILE=`echo "${DESC}" | grep -E "^${SELECTION_NUMBER}\) \.\.\." | sed -E 's/^.*(\/\/.*)#.*/\1/g'`
		SELECTED_SHELVED_FILE=`echo "${DESC}" | grep -E "^${SELECTION_NUMBER}\) //" | sed -E 's/^.*(\/\/.*)#.*/\1/g'`

		#echo "$SELECTION_NUMBER $SELECTED_FILE"
		if [[ "$SELECTED_FILE" != "" ]] ; then
			SELECTED_FILES="${SELECTED_FILES} ${SELECTED_FILE}"
		fi
		if [[ "$SELECTED_SHELVED_FILE" != "" ]] ; then
			SELECTED_SHELVED_FILES="${SELECTED_SHELVED_FILES} ${SELECTED_SHELVED_FILE}"
		fi
	done

	#outputs are global variables SELECTED_FILES and SELECTED_SHELVED_FILES
	if [[ "$SELECTED_FILES" != "" ]] ; then
		echo "selected files: $SELECTED_FILES"
	fi
	if [[ "$SELECTED_SHELVED_FILE" != "" ]] ; then
		echo "selected shelved files: $SELECTED_SHELVED_FILES"
	fi
}


confirm()
{
	read -p "$1" -n 1 -r
	echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]
	then
		exit 1
	fi
}

function file_actions_menu()
{
	local CL=$1

	#relies on SELECTED_FILES and SELECTED_SHELVED_FILES being set before this call
	echo "==== File actions ===="
	echo -e "${YELLOW}o)${NC} open"
	echo -e "${YELLOW}d)${NC} diff against repo"
	echo -e "${YELLOW}D)${NC} diff shelved vs checked out"
	echo -e "${YELLOW}l)${NC} view log"
	if [[ "$SELECTED_FILES" != "" ]]; then
		echo -e "${YELLOW}S)${NC} sync to latest"
		echo -e "${YELLOW}R)${NC} revert"
		echo -e "${YELLOW}s)${NC} shelve"
		echo -e "${YELLOW}m)${NC} move to another cl"
		echo -e "${YELLOW}r)${NC} Resolve"
	fi
	if [[ "$SELECTED_SHELVED_FILES" != "" ]]; then
		echo -e "${YELLOW}ds)${NC} delete shelved"
		echo -e "${YELLOW}u)${NC} unshelve"
	fi

	echo -e "${YELLOW}Select an action to perform on the file(s):${NC}"

	read CH
	case $CH in
	o)
		#replace //sw/... with $P4ROOT/sw/...
		echo "$SELECTED_FILES" | sed -E "s#//#$P4ROOT/#g" | xargs $EDITOR
	    ;;
	d)
		for SELECTED_FILE in ${SELECTED_FILES}; do
			echo "diffing $SELECTED_FILE vs repo"
			p4 diff ${SELECTED_FILE}
		done

		if [[ "$SELECTED_SHELVED_FILES" != "" ]]; then
			local SHELVED=`p4 files @=$CL 2> /dev/null`
			for SELECTED_FILE in ${SELECTED_SHELVED_FILES}; do
				local SELECTED_FILE_WITH_REV=`echo "$SHELVED" | grep "$SELECTED_FILE" | sed -E 's/^([^ ]*).*/\1/g'`
				echo "diffing shelved $SELECTED_FILE vs $SELECTED_FILE_WITH_REV(depot)"
				p4 diff2 $SELECTED_FILE_WITH_REV $SELECTED_FILE@=$CL 
			done
		fi
		;;
	D)
		for SELECTED_FILE in ${SELECTED_FILES}; do
			echo "diffing shelved $SELECTED_FILE vs checked out"
			p4 diff ${SELECTED_FILE}@=${SELECTED_CL}
		done

		for SELECTED_FILE in ${SELECTED_SHELVED_FILES}; do
			echo "diffing shelved $SELECTED_FILE vs checked out"
			p4 diff ${SELECTED_FILE}@=${SELECTED_CL}
		done
		;;
	l)
		if [[ "$SELECTED_FILES" != "" ]]; then
			p4 filelog -L ${SELECTED_FILES}
		else
			echo "invalid selection"
		fi
		;;

	S)
		if [[ "$SELECTED_FILES" != "" ]]; then
			p4 sync ${SELECTED_FILES}
		else
			echo "invalid selection"
		fi
		;;
	R)
		if [[ "$SELECTED_FILES" != "" ]]; then
			confirm "Confirm revert $SELECTED_FILES? [y/n]"
			p4 revert ${SELECTED_FILES}
		else
			echo "invalid selection"
		fi
		;;
	s)
		if [[ "$SELECTED_FILES" != "" ]]; then
			p4 shelve -f -c ${SELECTED_CL} ${SELECTED_FILES}
		else
			echo "invalid selection"
		fi
		;;
	m)
		echo "Select change to move ${SELECTED_FILES} to:"
		local CHANGES_LIST=$(generate_changes_list)
		echo "$CHANGES_LIST"
		read SELECTION
		#strip color
		CHANGES_LIST=`echo "$CHANGES_LIST" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"`
		#pick out CL based on selection
		local DEST_CL=$(select_from_changes_list "$CHANGES_LIST" $SELECTION)
		p4 reopen -c ${DEST_CL} ${SELECTED_FILES}
		describe_cl ${DEST_CL}
		;;
	r)
		if [[ "$SELECTED_FILES" != "" ]]; then
			echo "In P4merge, middle = original, right = your changes, left = depot changes"
			p4 resolve $SELECTED_FILES
		else
			echo "bad selection"
		fi
		;;
	u)
		if [[ "$SELECTED_SHELVED_FILES" != "" ]]; then
			p4 unshelve -s ${SELECTED_CL} -f -c ${SELECTED_CL} ${SELECTED_SHELVED_FILES}
		else
			echo "invalid selection"
		fi
		;;
	ds)
		if [[ "$SELECTED_SHELVED_FILES" != "" ]]; then
			p4 shelve -d -c ${SELECTED_CL} ${SELECTED_SHELVED_FILES}
		else
			echo "invalid selection"
		fi
		;;
	*)
		echo "bad input"
		;;
	esac
}

function external_cl_file_actions_menu()
{
	local CL=$1

	#relies on SELECTED_FILES and SELECTED_SHELVED_FILES being set before this call
	echo "==== File actions ===="
	echo -e "${YELLOW}o)${NC} open"
	echo -e "${YELLOW}d)${NC} diff against previous(submitted CL) or base(shelved files)"
	if [[ "$SELECTED_SHELVED_FILES" != "" ]]; then
		echo -e "${YELLOW}u)${NC} unshelve"
	fi

	echo -e "${YELLOW}Select an action to perform on the file(s):${NC}"

	read CH
	case $CH in
	o)
		if [[ "$SELECTED_FILES" != "" ]]; then
			local DESC=`p4 describe -s $CL 2> /dev/null`
			for SELECTED_FILE in ${SELECTED_FILES}; do
				local REV=`echo "$DESC" | grep "^\.\.\. $SELECTED_FILE" | sed -E 's/^.*#([0-9]*).*/\1/g'`
				#sed strips off path, keeps filename
				local FILENAME=`echo $SELECTED_FILE | sed -E 's@^.*/([^/]*)$@\1@g'`    #strip everything until filename (lasat /)
				local FILENAME="$TMPDIR/$FILENAME"
				p4 print $SELECTED_FILE#$REV > $FILENAME
				$EDITOR $FILENAME
			done
		fi
		if [[ "$SELECTED_SHELVED_FILES" != "" ]]; then
			echo "viewing of shelved files is not supported. You can diff against base version instead" 
		fi
	    ;;
	d)
		if [[ "$SELECTED_FILES" != "" ]]; then
			local DESC=`p4 describe -s $CL 2> /dev/null`
			for SELECTED_FILE in ${SELECTED_FILES}; do	
				local REV=`echo "$DESC" | grep "^\.\.\. $SELECTED_FILE" | sed -E 's/^.*#([0-9]*).*/\1/g'`
				local LAST_REV=$(( $REV - 1 ))
				echo "diffing $SELECTED_FILE#$LAST_REV - $SELECTED_FILE#$REV"
				p4 diff2 $SELECTED_FILE\#$LAST_REV $SELECTED_FILE\#$REV
			done
		fi

		if [[ "$SELECTED_SHELVED_FILES" != "" ]]; then
			local SHELVED=`p4 files @=$1 2> /dev/null`
			for SELECTED_FILE in ${SELECTED_SHELVED_FILES}; do
				local SELECTED_FILE_WITH_REV=`echo "$SHELVED" | grep "$SELECTED_FILE" | sed -E 's/^([^ ]*).*/\1/g'`
				echo "diffing shelved $SELECTED_FILE vs $SELECTED_FILE_WITH_REV(depot)"
				p4 diff2 $SELECTED_FILE_WITH_REV $SELECTED_FILE@=$CL 
			done
		fi
		;;
	u)
		if [[ "$SELECTED_SHELVED_FILES" != "" ]]; then
			echo "Select Change to which to unshelve these files:"
			local CHANGES_LIST=$(generate_changes_list)
			echo "$CHANGES_LIST"
			read SELECTION
			#strip color
			CHANGES_LIST=`echo "$CHANGES_LIST" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"`
			#pick out CL based on selection
			SELECTED_CL=$(select_from_changes_list "$CHANGES_LIST" $SELECTION)
			p4 unshelve -s ${CL} -f -c ${SELECTED_CL} ${SELECTED_SHELVED_FILES}
		else
			echo "invalid selection"
		fi
		;;
	*)
		echo "bad input"
		;;
	esac
}

function cl_menu()
{
	local CL="$1"
	
	while :
	do
		CL_DESCRIPTION=$(describe_cl_and_number_files $CL)
		echo -e "$CL_DESCRIPTION"
		echo -e "${YELLOW}a)${NC} add new files to CL"
		echo -e "${YELLOW}b)${NC} checkout new files to CL"
		echo -e "${YELLOW}c)${NC} edit CL description"
		echo -e "${YELLOW}d)${NC} delete CL"
		echo -e "${YELLOW}select a file (eg: 5), group of files (eg: 5 7 12), all files (*), or action (eg: a):${NC}"

		read SELECTION

		case $SELECTION in
	    ''|*[0-9\s\*]*)   #number, lists of numbers, and *
			#strip color
			CL_DESCRIPTION=`echo "$CL_DESCRIPTION" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"`	
			#select file(s) based on selection
			select_files_from_cl_description "$CL_DESCRIPTION" "$SELECTION"
	
			file_actions_menu $CL
			;;

		a)
			echo "Which file(s) to add?"
			read FILENAMES
			p4 add -c ${CL} ${FILENAMES}
			;;
		b)
			echo "Which file(s) to checkout?"
			read FILENAMES
			p4 edit -c ${CL} ${FILENAMES}
			;;
		c)
			P4EDITOR=nano p4 change ${SELECTED_CL} 
			;;
		d)
			confirm "Confirm deletion of ${CL}?(y/n)"
			#revert all files in this CL
			p4 revert -c ${CL} //...
			#delete all shelved files
			p4 shelve -d -c ${CL}
			#delete the cl
			p4 change -d ${CL}
			#can't show the CL menu anymore since CL doesn't exist. Just exit
			exit 0
			;;
		*) 
			echo "bad input"
			;;
		esac
		
		read -p "Press enter to continue"
		clear
	done
}

function external_cl_menu()
{
	local CL="$1"
	
	while :
	do
		CL_DESCRIPTION=$(describe_external_cl_and_number_files $CL)
		echo -e "$CL_DESCRIPTION"

		echo -e "${YELLOW}select a file (eg: 5), group of files (eg: 5 7 12), all files (*), or action (eg: a):${NC}"

		read SELECTION

		case $SELECTION in
	    ''|*[0-9\s\*]*)   #number, lists of numbers, and *
			#strip color
			CL_DESCRIPTION=`echo "$CL_DESCRIPTION" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"`	
			#select file(s) based on selection
			select_files_from_cl_description "$CL_DESCRIPTION" "$SELECTION"
	
			external_cl_file_actions_menu $CL
			;;
		*) 
			echo "bad input"
			;;
		esac
		
		read -p "Press enter to continue"
		clear
	done
}


#check some external variables
if [[ "$P4CLIENT" == "" ]]; then
	echo "error: P4CLIENT env variable must be defined"
	exit 1
fi

if [[ "$P4ROOT" == "" ]]; then
	echo "error: P4ROOT env variable must be defined"
	exit 1
fi


CHANGES_LIST=$(generate_changes_list)

echo "==== Pending changes on $P4CLIENT ==="
echo "$CHANGES_LIST"
echo -e "${YELLOW}n)${NC} new change"
echo -e "${YELLOW}c)${NC} view change by CL#"
echo -e "${YELLOW}Select CL (0, 1, 2, ...) or action (n, ..):${NC}"

read SELECTION

case $SELECTION in
    ''|*[0-9]*)
		#strip color
		CHANGES_LIST=`echo "$CHANGES_LIST" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"`
		#pick out CL based on selection
		SELECTED_CL=$(select_from_changes_list "$CHANGES_LIST" $SELECTION)
		cl_menu $SELECTED_CL
		;;
	n)
		p4 change
		;;
	c)
		read -p "enter CL#:" SELECTED_CL
		external_cl_menu $SELECTED_CL
		;;
    *)
		echo bad input
		;;
esac

#TODO: 
#launching code review
#submitting

